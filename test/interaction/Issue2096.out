(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-info-action "*Type-checking*" "Checking Issue2096 (Issue2096.agda). " t)
(agda2-info-action "*Type-checking*" " Checking Agda.Builtin.Size (agda-default-include-path/Agda/Builtin/Size.agda). " t)
(agda2-info-action "*Type-checking*" " Finished Agda.Builtin.Size. " t)
(agda2-verbose "Solving constraints (DontDefaultToInfty) ↑ _l_151 t =< .i : Size ")
(agda2-verbose "converting size constraint ↑ _l_151 t =< .i : Size ")
(agda2-verbose "Solving constraint cluster [.i, .A, .B, .Γ, .j, t] .j < .i |- ↑ _l_151 .i .A .B .Γ .j t ≤ .i ")
(agda2-verbose "Size hypotheses [.i, .A, .B, .Γ, .j, t] .j < .i |- .j < .i Canonicalized constraints [.i, .A, .B, .Γ, .j, t] .j < .i |- ↑ _l_151 .i .A .B .Γ .j t ≤ .i ")
(agda2-verbose "solution _l_151 .i .A .B .Γ .j t := .j ")
(agda2-verbose " xs = [5,4,3,2,1,0] u = Var 1 [] ")
(agda2-verbose "Solving constraints (DontDefaultToInfty) _o_177 =< ↑ (↑ (↑ .m)) : Size ↑ _o_181 =< _o_177 : Size ↑ _l_185 =< _o_181 : Size ↑ _k_186 =< _o_181 : Size ↑ _l_190 =< _k_186 : Size ↑ _k_191 =< _k_186 : Size ")
(agda2-verbose "converting size constraint _o_177 =< ↑ (↑ (↑ .m)) : Size ")
(agda2-verbose "converting size constraint ↑ _o_181 =< _o_177 : Size ")
(agda2-verbose "converting size constraint ↑ _l_185 =< _o_181 : Size ")
(agda2-verbose "converting size constraint ↑ _k_186 =< _o_181 : Size ")
(agda2-verbose "converting size constraint ↑ _l_190 =< _k_186 : Size ")
(agda2-verbose "converting size constraint ↑ _k_191 =< _k_186 : Size ")
(agda2-verbose "Solving constraint cluster [.m, .A, .B, .Γ] _o_177 .m .A .B .Γ ≤ ↑ (↑ (↑ .m)) [.m, .A, .B, .Γ] ↑ _o_181 .m .A .B .Γ ≤ _o_177 .m .A .B .Γ [.m, .A, .B, .Γ] ↑ _l_185 .m .A .B .Γ ≤ _o_181 .m .A .B .Γ [.m, .A, .B, .Γ] ↑ _k_186 .m .A .B .Γ ≤ _o_181 .m .A .B .Γ [.m, .A, .B, .Γ] ↑ _l_190 .m .A .B .Γ ≤ _k_186 .m .A .B .Γ [.m, .A, .B, .Γ] ↑ _k_191 .m .A .B .Γ ≤ _k_186 .m .A .B .Γ ")
(agda2-verbose "Size hypotheses Canonicalized constraints [.m, .A, .B, .Γ] _o_177 .m .A .B .Γ ≤ ↑ (↑ (↑ .m)) [.m, .A, .B, .Γ] ↑ _o_181 .m .A .B .Γ ≤ _o_177 .m .A .B .Γ [.m, .A, .B, .Γ] ↑ _l_185 .m .A .B .Γ ≤ _o_181 .m .A .B .Γ [.m, .A, .B, .Γ] ↑ _k_186 .m .A .B .Γ ≤ _o_181 .m .A .B .Γ [.m, .A, .B, .Γ] ↑ _l_190 .m .A .B .Γ ≤ _k_186 .m .A .B .Γ [.m, .A, .B, .Γ] ↑ _k_191 .m .A .B .Γ ≤ _k_186 .m .A .B .Γ ")
(agda2-verbose "solution _o_177 .m .A .B .Γ := ↑ (↑ (↑ .m)) ")
(agda2-verbose " xs = [3,2,1,0] u = Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Var 3 [])])])] ")
(agda2-verbose "solution _o_181 .m .A .B .Γ := ↑ (↑ .m) ")
(agda2-verbose " xs = [3,2,1,0] u = Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Var 3 [])])] ")
(agda2-verbose "solution _l_185 .m .A .B .Γ := ↑ .m ")
(agda2-verbose " xs = [3,2,1,0] u = Def Agda.Builtin.Size.↑_ [Apply ru(Var 3 [])] ")
(agda2-verbose "solution _k_186 .m .A .B .Γ := ↑ .m ")
(agda2-verbose " xs = [3,2,1,0] u = Def Agda.Builtin.Size.↑_ [Apply ru(Var 3 [])] ")
(agda2-verbose "solution _l_190 .m .A .B .Γ := .m ")
(agda2-verbose " xs = [3,2,1,0] u = Var 3 [] ")
(agda2-verbose "solution _k_191 .m .A .B .Γ := .m ")
(agda2-verbose " xs = [3,2,1,0] u = Var 3 [] ")
(agda2-verbose "Solving constraints (DontDefaultToInfty) ↑ (↑ (↑ (↑ (↑ _m_224 t)))) =< _j_218 t : Size ↑ _l_222 t =< _j_218 t : Size _j_218 t =< ↑ (↑ (↑ (↑ .m))) : Size ↑ _o_231 t =< _l_222 t : Size ↑ (↑ (↑ .m′)) =< _o_231 t : Size ")
(agda2-verbose "converting size constraint ↑ (↑ (↑ (↑ (↑ _m_224 t)))) =< _j_218 t : Size ")
(agda2-verbose "converting size constraint ↑ _l_222 t =< _j_218 t : Size ")
(agda2-verbose "converting size constraint _j_218 t =< ↑ (↑ (↑ (↑ .m))) : Size ")
(agda2-verbose "converting size constraint ↑ _o_231 t =< _l_222 t : Size ")
(agda2-verbose "converting size constraint ↑ (↑ (↑ .m′)) =< _o_231 t : Size ")
(agda2-verbose "Solving constraint cluster [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- ↑ (↑ (↑ (↑ (↑ _m_224 .m .A .B .Γ .m′ t)))) ≤ _j_218 .m .A .B .Γ .m′ t [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- ↑ _l_222 .m .A .B .Γ .m′ t ≤ _j_218 .m .A .B .Γ .m′ t [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- _j_218 .m .A .B .Γ .m′ t ≤ ↑ (↑ (↑ (↑ .m))) [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- ↑ _o_231 .m .A .B .Γ .m′ t ≤ _l_222 .m .A .B .Γ .m′ t [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- ↑ (↑ (↑ .m′)) ≤ _o_231 .m .A .B .Γ .m′ t ")
(agda2-verbose "Size hypotheses [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- .m′ < .m Canonicalized constraints [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- ↑ (↑ (↑ (↑ (↑ _m_224 .m .A .B .Γ .m′ t)))) ≤ _j_218 .m .A .B .Γ .m′ t [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- ↑ _l_222 .m .A .B .Γ .m′ t ≤ _j_218 .m .A .B .Γ .m′ t [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- _j_218 .m .A .B .Γ .m′ t ≤ ↑ (↑ (↑ (↑ .m))) [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- ↑ _o_231 .m .A .B .Γ .m′ t ≤ _l_222 .m .A .B .Γ .m′ t [.m, .A, .B, .Γ, .m′, t] .m′ < .m |- ↑ (↑ (↑ .m′)) ≤ _o_231 .m .A .B .Γ .m′ t ")
(agda2-verbose "solution _j_218 .m .A .B .Γ .m′ t := ↑ (↑ (↑ (↑ (↑ .m′)))) ")
(agda2-verbose " xs = [5,4,3,2,1,0] u = Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Var 1 [])])])])])] ")
(agda2-verbose "solution _l_222 .m .A .B .Γ .m′ t := ↑ (↑ (↑ (↑ .m′))) ")
(agda2-verbose " xs = [5,4,3,2,1,0] u = Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Var 1 [])])])])] ")
(agda2-verbose "solution _m_224 .m .A .B .Γ .m′ t := .m′ ")
(agda2-verbose " xs = [5,4,3,2,1,0] u = Var 1 [] ")
(agda2-verbose "solution _o_231 .m .A .B .Γ .m′ t := ↑ (↑ (↑ .m′)) ")
(agda2-verbose " xs = [5,4,3,2,1,0] u = Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Def Agda.Builtin.Size.↑_ [Apply ru(Var 1 [])])])] ")
(agda2-verbose "Solving constraints (DontDefaultToInfty) ↑ (↑ (↑ (↑ (↑ _m_259 t)))) =< _j_253 t : Size ↑ _l_257 t =< _j_253 t : Size ↑ _j_253 t =< ?1 : Size ↑ _o_266 t =< _l_257 t : Size ↑ ?0 =< _o_266 t : Size ")
(agda2-verbose "converting size constraint ↑ (↑ (↑ (↑ (↑ _m_259 t)))) =< _j_253 t : Size ")
(agda2-verbose "converting size constraint ↑ _l_257 t =< _j_253 t : Size ")
(agda2-verbose "converting size constraint ↑ _j_253 t =< ?1 : Size ")
(agda2-verbose "converting size constraint ↑ _o_266 t =< _l_257 t : Size ")
(agda2-verbose "converting size constraint ↑ ?0 =< _o_266 t : Size ")
(agda2-verbose "Solving constraint cluster [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ (↑ (↑ (↑ (↑ _m_259 .q .A .B .Γ .r t)))) ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _l_257 .q .A .B .Γ .r t ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _j_253 .q .A .B .Γ .r t ≤ ?1 .q .A .B .Γ .r [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _o_266 .q .A .B .Γ .r t ≤ _l_257 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ ?0 .q .A .B .Γ .r ≤ _o_266 .q .A .B .Γ .r t ")
(agda2-verbose "Size hypotheses [.q, .A, .B, .Γ, .r, t] .r < .q |- .r < .q Canonicalized constraints [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ (↑ (↑ (↑ (↑ _m_259 .q .A .B .Γ .r t)))) ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _l_257 .q .A .B .Γ .r t ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _j_253 .q .A .B .Γ .r t ≤ ?1 .q .A .B .Γ .r [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _o_266 .q .A .B .Γ .r t ≤ _l_257 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ ?0 .q .A .B .Γ .r ≤ _o_266 .q .A .B .Γ .r t ")
(agda2-verbose "cluster did not solve these size metas: _246 _248 _j_253 _l_257 _m_259 _o_266 ")
(agda2-verbose "Solving constraints (DefaultToInfty) ↑ (↑ (↑ (↑ (↑ _m_259 t)))) =< _j_253 t : Size ↑ _l_257 t =< _j_253 t : Size ↑ _j_253 t =< ?1 : Size ↑ _o_266 t =< _l_257 t : Size ↑ ?0 =< _o_266 t : Size ")
(agda2-verbose "converting size constraint ↑ (↑ (↑ (↑ (↑ _m_259 t)))) =< _j_253 t : Size ")
(agda2-verbose "converting size constraint ↑ _l_257 t =< _j_253 t : Size ")
(agda2-verbose "converting size constraint ↑ _j_253 t =< ?1 : Size ")
(agda2-verbose "converting size constraint ↑ _o_266 t =< _l_257 t : Size ")
(agda2-verbose "converting size constraint ↑ ?0 =< _o_266 t : Size ")
(agda2-verbose "Solving constraint cluster [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ (↑ (↑ (↑ (↑ _m_259 .q .A .B .Γ .r t)))) ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _l_257 .q .A .B .Γ .r t ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _j_253 .q .A .B .Γ .r t ≤ ?1 .q .A .B .Γ .r [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _o_266 .q .A .B .Γ .r t ≤ _l_257 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ ?0 .q .A .B .Γ .r ≤ _o_266 .q .A .B .Γ .r t ")
(agda2-verbose "Size hypotheses [.q, .A, .B, .Γ, .r, t] .r < .q |- .r < .q Canonicalized constraints [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ (↑ (↑ (↑ (↑ _m_259 .q .A .B .Γ .r t)))) ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _l_257 .q .A .B .Γ .r t ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _j_253 .q .A .B .Γ .r t ≤ ?1 .q .A .B .Γ .r [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _o_266 .q .A .B .Γ .r t ≤ _l_257 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ ?0 .q .A .B .Γ .r ≤ _o_266 .q .A .B .Γ .r t ")
(agda2-verbose "cluster did not solve these size metas: _246 _248 _j_253 _l_257 _m_259 _o_266 ")
(agda2-verbose "Solving constraints (DefaultToInfty) ↑ ?0 =< _o_266 t : Size ↑ _o_266 t =< _l_257 t : Size ↑ _j_253 t =< ?1 : Size ↑ _l_257 t =< _j_253 t : Size ↑ (↑ (↑ (↑ (↑ _m_259 t)))) =< _j_253 t : Size ")
(agda2-verbose "converting size constraint ↑ ?0 =< _o_266 t : Size ")
(agda2-verbose "converting size constraint ↑ _o_266 t =< _l_257 t : Size ")
(agda2-verbose "converting size constraint ↑ _j_253 t =< ?1 : Size ")
(agda2-verbose "converting size constraint ↑ _l_257 t =< _j_253 t : Size ")
(agda2-verbose "converting size constraint ↑ (↑ (↑ (↑ (↑ _m_259 t)))) =< _j_253 t : Size ")
(agda2-verbose "Solving constraint cluster [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ ?0 .q .A .B .Γ .r ≤ _o_266 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _o_266 .q .A .B .Γ .r t ≤ _l_257 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _j_253 .q .A .B .Γ .r t ≤ ?1 .q .A .B .Γ .r [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _l_257 .q .A .B .Γ .r t ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ (↑ (↑ (↑ (↑ _m_259 .q .A .B .Γ .r t)))) ≤ _j_253 .q .A .B .Γ .r t ")
(agda2-verbose "Size hypotheses [.q, .A, .B, .Γ, .r, t] .r < .q |- .r < .q Canonicalized constraints [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ ?0 .q .A .B .Γ .r ≤ _o_266 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _o_266 .q .A .B .Γ .r t ≤ _l_257 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _j_253 .q .A .B .Γ .r t ≤ ?1 .q .A .B .Γ .r [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _l_257 .q .A .B .Γ .r t ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ (↑ (↑ (↑ (↑ _m_259 .q .A .B .Γ .r t)))) ≤ _j_253 .q .A .B .Γ .r t ")
(agda2-verbose "cluster did not solve these size metas: _246 _248 _j_253 _l_257 _m_259 _o_266 ")
(agda2-status-action "")
(agda2-info-action "*All Goals, Errors*" "?0 : Size ?1 : Size _j_253 : Size< ?1 [ at Issue2096.agda:55,11-14 ] _l_257 : Size< _j_253 t [ at Issue2096.agda:55,16-19 ] _m_259 : Size [ at Issue2096.agda:55,20-25 ] _o_266 : Size< _l_257 t [ at Issue2096.agda:55,27-30 ] ———— Errors ———————————————————————————————————————————————— Failed to solve the following constraints: [0] ↑ (↑ (↑ (↑ (↑ _m_259 t)))) =< _j_253 t : Size [0] ↑ _l_257 t =< _j_253 t : Size [0] ↑ _j_253 t =< ?1 : Size [0] ↑ _o_266 t =< _l_257 t : Size [0] ↑ ?0 =< _o_266 t : Size " nil)
((last . 1) . (agda2-goals-action '(0 1)))
(agda2-verbose "Solving constraints (DontDefaultToInfty) ↑ (↑ (↑ (↑ (↑ _m_259 t)))) =< _j_253 t : Size ↑ _l_257 t =< _j_253 t : Size ↑ _j_253 t =< ?1 : Size ↑ _o_266 t =< _l_257 t : Size ↑ .q =< _o_266 t : Size ")
(agda2-verbose "converting size constraint ↑ (↑ (↑ (↑ (↑ _m_259 t)))) =< _j_253 t : Size ")
(agda2-verbose "converting size constraint ↑ _l_257 t =< _j_253 t : Size ")
(agda2-verbose "converting size constraint ↑ _j_253 t =< ?1 : Size ")
(agda2-verbose "converting size constraint ↑ _o_266 t =< _l_257 t : Size ")
(agda2-verbose "converting size constraint ↑ .q =< _o_266 t : Size ")
(agda2-verbose "Solving constraint cluster [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ (↑ (↑ (↑ (↑ _m_259 .q .A .B .Γ .r t)))) ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _l_257 .q .A .B .Γ .r t ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _j_253 .q .A .B .Γ .r t ≤ ?1 .q .A .B .Γ .r [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _o_266 .q .A .B .Γ .r t ≤ _l_257 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ .q ≤ _o_266 .q .A .B .Γ .r t ")
(agda2-verbose "Size hypotheses [.q, .A, .B, .Γ, .r, t] .r < .q |- .r < .q Canonicalized constraints [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ (↑ (↑ (↑ (↑ _m_259 .q .A .B .Γ .r t)))) ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _l_257 .q .A .B .Γ .r t ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _j_253 .q .A .B .Γ .r t ≤ ?1 .q .A .B .Γ .r [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _o_266 .q .A .B .Γ .r t ≤ _l_257 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ .q ≤ _o_266 .q .A .B .Γ .r t ")
(agda2-info-action "*Error*" "1,1-2 Cannot solve size constraints [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ (↑ (↑ (↑ (↑ _m_259 .q .A .B .Γ .r t)))) ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _l_257 .q .A .B .Γ .r t ≤ _j_253 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _j_253 .q .A .B .Γ .r t ≤ ?1 .q .A .B .Γ .r [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ _o_266 .q .A .B .Γ .r t ≤ _l_257 .q .A .B .Γ .r t [.q, .A, .B, .Γ, .r, t] .r < .q |- ↑ .q ≤ _o_266 .q .A .B .Γ .r t Reason: inconsistent upper bound for 259 when checking that the expression q has type Size" nil)
(agda2-highlight-load-and-delete-action)
(agda2-status-action "")
